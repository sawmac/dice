/*! dice 2014-10-21 */
var Die = function() {
    var upperRoll, lowerRoll = 1, symbols = false, dieObj;
    if (arguments.length === 0) {
        throw new Error("No arguments passed to function");
    }
    if (Array.isArray(arguments[0])) {
        upperRoll = arguments[0].length;
        symbols = arguments[0];
    } else if (arguments.length > 1) {
        lowerRoll = arguments[0];
        upperRoll = arguments[1];
        if (lowerRoll > upperRoll || lowerRoll === upperRoll) {
            throw new Error("First value should be less than second value");
        }
    } else {
        upperRoll = arguments[0];
    }
    this.lower = lowerRoll;
    this.upper = upperRoll;
    this.symbols = symbols;
    this.rollHistory = [];
    return this;
};

Die.prototype = {
    roll: function() {
        var roll = Math.floor(Math.random() * (this.upper - this.lower + 1)) + this.lower;
        if (this.symbols) {
            return this.symbols[roll - 1];
        } else {
            this.rollHistory.push(roll);
            return roll;
        }
    },
    history: function(action) {
        if (action === "report") {
            return this.rollHistory;
        } else if (action === "clear") {
            this.rollHistory.length = 0;
            return this.rollHistory;
        }
    }
};

var rollParser = function(str) {
    str = str.toLowerCase();
    str = str.replace(/ /g, "");
    if (/[^d\+0-9]+/.test(str)) {
        throw new Error("'" + str + "' is not a valid string");
    }
    var results = {};
    var total = 0;
    var dieCollections = str.split("+");
    dieCollections.forEach(function(elem) {
        var rolls = elem.split("d");
        var error = false;
        var totalRolls;
        var dieNum;
        var dieType;
        var rollVal;
        if (rolls.length > 2) {
            error = true;
        } else if (rolls.length === 1) {
            dieNum = parseInt(rolls[0]);
            totalRolls = 1;
            if (!dieNum) {
                error = true;
            }
        } else {
            totalRolls = parseInt(rolls[0]);
            if (totalRolls === 0) {
                throw new Error("You can't roll the die 0 times.");
            }
            totalRolls = totalRolls || 1;
            dieNum = parseInt(rolls[1]);
            if (dieNum === 0) {
                throw new Error("Hey, there are no 0-sided dice.");
            }
            if (!dieNum) {
                error = true;
            }
        }
        if (error) {
            throw new Error("'" + elem + "' is not validly formatted");
        }
        dieType = "d" + dieNum;
        results[dieType] = [];
        if (totalRolls > 1e9) {
            throw new Error("Puhleeeze. That's way too many rolls");
        } else if (dieNum > 1e9) {
            throw new Error("Puhleeeze. There is no die with that many sides.");
        }
        for (var i = 0; i < totalRolls; i += 1) {
            roll = Math.floor(Math.random() * dieNum) + 1;
            total += roll;
            results[dieType].push(roll);
        }
    });
    results.str = str;
    results.total = total;
    return results;
};

var testString = window.location.search.substr(1);

var testString = decodeURIComponent(testString);

console.log(rollParser(testString));

var die = {
    roll: function() {
        var roll = Math.floor(Math.random() * (this.upper - this.lower + 1)) + this.lower;
        if (this.symbols) {
            var symbol = this.symbols[roll - 1];
            this.rollHistory.push(symbol);
            return symbol;
        } else {
            this.rollHistory.push(roll);
            return roll;
        }
    },
    history: function(action) {
        if (action === "report") {
            return this.rollHistory;
        } else if (action === "clear") {
            this.rollHistory.length = 0;
            return this.rollHistory;
        }
    }
};

var makeDie = function() {
    var upperRoll, lowerRoll = 1, symbols = false, dieObj;
    if (arguments.length === 0) {
        throw new Error("No arguments passed to function");
    }
    if (Array.isArray(arguments[0])) {
        upperRoll = arguments[0].length;
        symbols = arguments[0];
    } else if (arguments.length > 1) {
        lowerRoll = arguments[0];
        upperRoll = arguments[1];
        if (lowerRoll > upperRoll || lowerRoll === upperRoll) {
            throw new Error("First value should be less than second value");
        }
    } else {
        upperRoll = arguments[0];
    }
    dieObj = Object.create(die, {
        lower: {
            value: lowerRoll
        },
        upper: {
            value: upperRoll
        },
        symbols: {
            value: symbols
        },
        rollHistory: {
            value: []
        }
    });
    return dieObj;
};

six = makeDie(1, 6);